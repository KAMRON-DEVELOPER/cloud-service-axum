apiVersion: v1
kind: Namespace
metadata:
  name: kafka-ns
---
apiVersion: v1
kind: Service
metadata:
  name: kafka-service
  namespace: kafka-ns
spec:
  clusterIP: None
  publishNotReadyAddresses: true
  selector:
    app: kafka
  ports:
    - name: kafka
      protocol: TCP
      port: 9092
      targetPort: 9092
    - name: controller
      protocol: TCP
      port: 9093
      targetPort: 9093
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka-ss
  namespace: kafka-ns
spec:
  serviceName: "kafka-service"
  replicas: 3
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      containers:
        - name: kafka
          image: apache/kafka:latest
          ports:
            - containerPort: 9092
              name: kafka
            - containerPort: 9093
              name: controller
          env:
            - name: KAFKA_PROCESS_ROLES
              value: "broker,controller"
            - name: KAFKA_CONTROLLER_LISTENER_NAMES
              value: "CONTROLLER"
            - name: KAFKA_LISTENERS
              value: "PLAINTEXT://:9092,CONTROLLER://:9093"
            - name: KAFKA_CONTROLLER_QUORUM_VOTERS
              value: "0@kafka-0.kafka-service.kafka-ns.svc.cluster.local:9093,1@kafka-1.kafka-service.kafka-ns.svc.cluster.local:9093,2@kafka-2.kafka-service.kafka-ns.svc.cluster.local:9093"
            - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
              value: "3"
            - name: KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR
              value: "3"
            - name: KAFKA_TRANSACTION_STATE_LOG_MIN_ISR
              value: "2"
            - name: KAFKA_LOG_DIRS
              value: "/var/lib/kafka/data"
          command: ["/bin/bash", "-c"]
          args:
            - |
              set -e

              # Get the pod's index (0, 1, or 2) from its hostname
              export KAFKA_NODE_ID=${HOSTNAME##*-}

              # Set advertised listener to this pod's unique DNS name
              export KAFKA_ADVERTISED_LISTENERS="PLAINTEXT://${HOSTNAME}.kafka-service.kafka-ns.svc.cluster.local:9092"

              # Get the shared Cluster ID
              export KAFKA_CLUSTER_ID=$(cat /config/CLUSTER_ID)

              CONFIG_FILE="/opt/kafka/config/kraft/server.properties"

              # Format storage *only if* it's not already formatted
              if [ ! -f /var/lib/kafka/data/meta.properties ]; then
                echo "Formatting storage for node $KAFKA_NODE_ID..."
                /opt/kafka/bin/kafka-storage.sh format -t $KAFKA_CLUSTER_ID -c $CONFIG_FILE
              else
                echo "Storage already formatted for node $KAFKA_NODE_ID"
              fi

              # Start Kafka
              echo "Starting Kafka server for node $KAFKA_NODE_ID..."
              /opt/kafka/bin/kafka-server-start.sh $CONFIG_FILE
          volumeMounts:
            - name: kafka-data
              mountPath: /var/lib/kafka/data
            - name: kafka-conf
              mountPath: /config
      volumes:
        - name: kafka-conf
          configMap:
            name: kafka-cm
  volumeClaimTemplates:
    - metadata:
        name: kafka-data
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 1Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: kafka-pvc
  namespace: kafka-ns
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
